{"version":3,"sources":["components/HelloWorld.js","components/Navigation.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["HelloWorld","this","props","name","React","Component","Navigation","useState","showMenu","setShowMenu","maskTransitions","useTransition","from","position","opacity","enter","leave","menuTransitions","transform","className","icon","faBars","onClick","map","item","key","div","style","Header","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2QAUeA,E,uKANX,OACE,qCAAWC,KAAKC,MAAMC,U,GAHHC,IAAMC,W,+BC0DhBC,MAvDf,WAAsB,IAAD,EACaC,oBAAS,GADtB,mBACZC,EADY,KACFC,EADE,KAGbC,EAAkBC,YAAcH,EAAU,KAAM,CACpDI,KAAM,CAAEC,SAAU,WAAYC,QAAS,GACvCC,MAAO,CAAED,QAAS,GAClBE,MAAO,CAAEF,QAAS,KAEdG,EAAkBN,YAAcH,EAAU,KAAM,CACpDI,KAAM,CAAEE,QAAS,EAAGI,UAAW,qBAC/BH,MAAO,CAAED,QAAS,EAAGI,UAAW,kBAChCF,MAAO,CAAEF,QAAS,EAAGI,UAAW,uBAGlC,OACE,6BACE,0BAAMC,UAAU,WACd,kBAAC,IAAD,CACEC,KAAMC,IACNC,QAAS,kBAAKb,GAAaD,OAI7BE,EAAgBa,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,IAAKvB,EAAd,EAAcA,MAAd,OAClBsB,GACA,kBAAC,IAASE,IAAV,CACED,IAAKA,EACLE,MAAOzB,EACPiB,UAAW,sDACXG,QAAS,kBAAMb,GAAY,SAM/BQ,EAAgBM,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,IAAKvB,EAAd,EAAcA,MAAd,OAClBsB,GACA,kBAAC,IAASE,IAAV,CACED,IAAKA,EACLE,MAAOzB,EACPiB,UAAY,4DAEZ,0BAAMA,UAAU,aAAhB,QAGA,4BACE,2CCrCCS,MAXf,WACE,OACE,4BAAQT,UAAU,kDAChB,0BAAMA,UAAU,aAAhB,WAGA,kBAAC,EAAD,QCCSU,MARf,WACE,OACE,4BAAQV,UAAU,gEAAlB,wBCaWW,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAY3B,KAAK,UACjB,kBAAC,EAAD,QCAc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3fdcae0e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass HelloWorld extends React.Component{\r\n  render(){\r\n    return (\r\n      <h1>Hello {this.props.name}</h1>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HelloWorld\r\n","import React, {useState} from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\r\nimport {useTransition, animated} from 'react-spring'\r\n\r\nfunction Navigation(){\r\n  const [showMenu, setShowMenu] = useState(false)\r\n\r\n  const maskTransitions = useTransition(showMenu, null, {\r\n    from: { position: 'absolute', opacity: 0 },\r\n    enter: { opacity: 1 },\r\n    leave: { opacity: 0 },\r\n  })\r\n  const menuTransitions = useTransition(showMenu, null, {\r\n    from: { opacity: 0, transform: 'translateX(-100%)'},\r\n    enter: { opacity: 1, transform: 'translateX(0%)'},\r\n    leave: { opacity: 0, transform: 'translateX(-100%)' },\r\n  })\r\n\r\n  return (\r\n    <nav>\r\n      <span className=\"text-xl\">\r\n        <FontAwesomeIcon \r\n          icon={faBars}\r\n          onClick={()=> setShowMenu(!showMenu)}\r\n          />\r\n      </span>\r\n      {\r\n        maskTransitions.map(({ item, key, props }) =>\r\n          item && \r\n          <animated.div \r\n            key={key} \r\n            style={props}\r\n            className =\"bg-black-t-50 fixed top-0 left-0 w-full h-full z-50\" \r\n            onClick={() => setShowMenu(false)}\r\n          >\r\n          </animated.div>\r\n        )\r\n      }\r\n      {\r\n        menuTransitions.map(({ item, key, props }) =>\r\n          item && \r\n          <animated.div \r\n            key={key} \r\n            style={props}\r\n            className = \"fixed bg-white top-0 left-0 w-4/5 h-full z-50 shadow p-3\"\r\n          >\r\n            <span className=\"font-bold\">\r\n              MENU\r\n            </span>\r\n            <ul>\r\n              <li>Home</li>\r\n            </ul>\r\n          </animated.div>\r\n        )\r\n      }\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navigation","import React from 'react'\r\nimport Navigation from './Navigation'\r\n\r\nfunction Header(){\r\n  return (\r\n    <header className=\"border-b p-3 flex justify-between items-center\">\r\n      <span className=\"font-bold\">\r\n        AppName\r\n      </span>\r\n      <Navigation />\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nfunction Footer(){\r\n  return (\r\n    <footer className=\"bg-gray-200 text-center text-xs p-3 absolute bottom-0 w-full\">\r\n      &copy; Copyright 2020\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer","import React from 'react';\nimport './tailwind.css';\nimport HelloWorld from './components/HelloWorld'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\n\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <HelloWorld name=\"World\" />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}